import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image
from glob import glob
from sklearn.model_selection import train_test_split
from sklearn import metrics
import cv2
import gc
import os
import tensorflow as tf
from tensorflow import keras
from keras import layers
import warnings
warnings.filterwarnings('ignore')

path = 'lung_colon_image_set/lung_image_sets'
classes = os.listdir(path)
classes

path = '/lung_colon_image_set/lung_image_sets'
for cat in classes:
image_dir = f'{path}/{cat}'
images = os.listdir(image_dir)
fig, ax = plt.subplots(1, 3, figsize=(15, 5))
fig.suptitle(f'Images for {cat} category . . . .', fontsize=20)
for i in range(3):
k = np.random.randint(0, len(images))
img = np.array(Image.open(f'{path}/{cat}/{images[k]}'))
ax[i].imshow(img)
ax[i].axis('off')
plt.show()
 
IMG_SIZE = 256
SPLIT = 0.2
EPOCHS = 10
BATCH_SIZE = 64

X = []
Y = []
for i, cat in enumerate(classes):
images = glob(f'{path}/{cat}/*.jpeg')
for image in images:
img = cv2.imread(image)
X.append(cv2.resize(img, (IMG_SIZE, IMG_SIZE)))
Y.append(i)
X = np.asarray(X)
one_hot_encoded_Y = pd.get_dummies(Y).values 

X_train, X_val, Y_train, Y_val = train_test_split(X, one_hot_encoded_Y, test_size = SPLIT, random_state = 2022)
print(X_train.shape, X_val.shape)

model = keras.models.Sequential([
layers.Conv2D(filters=32, kernel_size=(5, 5), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3),padding='same'),
layers.MaxPooling2D(2, 2),
layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu', padding='same'),
layers.MaxPooling2D(2, 2),
layers.Conv2D(filters=128, kernel_size=(3, 3), activation='relu', padding='same'),
layers.MaxPooling2D(2, 2),
layers.Flatten(),
layers.Dense(256, activation='relu'),
layers.BatchNormalization(),
layers.Dense(128, activation='relu'),
layers.Dropout(0.3),
layers.BatchNormalization(),
layers.Dense(3, activation='softmax')
])

model.summary()

model.compile( optimizer = 'adam',  loss = 'categorical_crossentropy', metrics = ['accuracy'] )

from keras.callbacks import EarlyStopping, ReduceLROnPlateau
class myCallback(tf.keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs={}):
if logs.get('val_accuracy') > 0.90:
print('\n Validation accuracy has reached upto \ 90% so, stopping further training.')
self.model.stop_training = True
es = EarlyStopping(patience=3, monitor='val_accuracy', restore_best_weights=True)
lr = ReduceLROnPlateau(monitor='val_loss', patience=2, factor=0.5, verbose=1)

history = model.fit(X_train, Y_train, validation_data = (X_val, Y_val), batch_size = BATCH_SIZE, epochs = EPOCHS, verbose = 1, callbacks = [es, lr, myCallback()])

Y_pred = model.predict(X_val)
Y_val = np.argmax(Y_val, axis=1)
Y_pred = np.argmax(Y_pred, axis=1)

metrics.confusion_matrix(Y_val, Y_pred)

print(metrics.classification_report(Y_val, Y_pred, target_names=classes))

  
# Now, you can load the model for testing
loaded_model = tf.keras.models.load_model('model.h5')
# Use the loaded model for predictions on new images
# new_image_path = 'lungaca161.jpeg'
# new_image_path = 'lungscc30.jpeg'
# new_image_path = 'lungn29.jpeg'
new_image_path = 'lungscc44.jpeg'
new_image = tf.keras.preprocessing.image.load_img(new_image_path, target_size=(256, 256,3))
new_image = tf.keras.preprocessing.image.img_to_array(new_image)
new_image = tf.expand_dims(new_image, axis=0)
result = loaded_model.predict(new_image)
print(result[0][1])
if result[0][1] >= 1:
    prediction = 'Cancerous'
else:
    prediction = 'Non-Cancerous'
print(f'The prediction for the new image is: {prediction}')
